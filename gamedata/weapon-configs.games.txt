"Games"
{
	"#default"
	{
		"Keys"
		{
			// Jumps to our code cave
			//
			//      ; set eax to our code cave address
			//      mov eax, 0xFFFFFFFF
			//      jmp eax ; jump to the code cave!
			//      nop
			//      nop
			//      nop
			//
			"FlareGunRadiusTrampoline" "\xB8\xFF\xFF\xFF\xFF\xFF\xE0\x90\x90\x90"

			// Loads a raw hex value into the FPU
			//
			//      ; Load our float value from the stack
			//      mov eax, 0xFFFFFFFF
			//      push eax
			//      fld dword [esp]
			//      pop eax
			//
			//      ; Op-codes from original function we stomped over
			//      lea     eax, [ebp-54h]
			//      push    eax
			//
			//      ; Set eax to our return address and jump to it
			//      mov eax, 0xFFFFFFFF
			//      jmp eax
			//
			"FlareGunRadiusCodeCave" "\xB8\xFF\xFF\xFF\xFF\x50\xD9\x04\x24\x58\x8D\x45\xAC\x50\xB8\xFF\xFF\xFF\xFF\xFF\xE0"
		}

		"Addresses"
		{
			// Linux only: Address of flare gun's float blast radius
			"CNMRiHFlareProjectile::FlyThink@BlastRadius"
			{
				"signature" "CNMRiHFlareProjectile::FlyThink"
				"offset" "674"
			}

			// Windows only: Address of unused code that is large enough to
			//               fit a code cave for changing flare gun's radius
			"CodeCaveForFlareGunRadius"
			{
				"signature" "CodeCaveForFlareGunRadius"
				"offset" "1"
			}

			// Windows only: Address to place trampoline to code cave.
			"TrampolineForFlareGunRadius"
			{
				"signature" "CNMRiHFlareProjectile::FlyThink"
				"windows"
				{
					"offset" "608"
				}
			}
		}

		"Offsets"
		{
			// Offset into FlareGunRadiusTrampoline of code cave address jump
			"FlareGunRadiusTrampoline.CodeCaveAddress"
			{
				"windows" "1"
			}

			// Offset into FlareGunRadiusCodeCave that float value is stored
			"FlareGunRadiusCodeCave.Radius"
			{
				"windows" "1"
			}

			// Offset into FlareGunRadiusCodeCave that return address is stored
			"FlareGunRadiusCodeCave.ReturnAddress"
			{
				"windows" "15"
			}

			"IsLinux"
			{
				"windows" "0"
				"linux" "1"
			}

			"CGameTrace::hitgroup"
			{
				// int
				"windows" "68"
				"linux" "68"
			}

			"CTakeDamageInfo::m_hAttacker"
			{
				// EHANDLE
				"windows" "40"
				"linux" "40"
			}

			"CTakeDamageInfo::m_hInflictor"
			{
				// EHANDLE
				"windows" "36"
				"linux" "36"
			}

			"CTakeDamageInfo::m_flDamage"
			{
				// float
				"windows" "48"
				"linux" "48"
			}

			"CTakeDamageInfo::m_bitsDamageType"
			{
				// int
				"windows" "60"
				"linux" "60"
			}

			// ================================================================
			// CBaseEntity

			"CBaseEntity::TraceAttack"
			{
				// void (const CTakeDamageInfo &, const Vector &, CGameTrace *, CDmgAccumulator *)
				"windows" "62"
				"linux" "63"
			}

			"CBaseEntity::IsNPC"
			{
				// bool ()
				"windows" "73"
				"linux" "74"
			}

			// ================================================================
			// Medical Weapons

			"CNMRiH_BaseMedicalItem::ApplyMedicalItem_Internal"
			{
				// void ()
				"windows" "438"
				"linux" "439"
			}

			"CNMRiH_BaseMedicalItem::ShouldUseMedicalItem"
			{
				// bool ()
				"windows" "439"
				"linux" "440"
			}

			// ================================================================
			// Grenade

			"CBaseSDKGrenade::EmitGrenade"
			{
				//void (Vector,QAngle,Vector,Vector,CBasePlayer *,CWeaponSDKBase *)
				"windows" "440"
				"linux" "441"
			}

			// ================================================================
			// Weapons

			"CBaseCombatWeapon::HasAnyAmmo"
			{
				// bool ()
				"windows" "247"
				"linux" "248"
			}

			"CBaseCombatWeapon::PrimaryAttack"
			{
				// void ()
				"windows" "278"
				"linux" "279"
			}

			"CBaseCombatWeapon::SecondaryAttack"
			{
				// void ()
				"windows" "279"
				"linux" "280"
			}

			"CBaseCombatWeapon::GetMaxClip1"
			{
				// int () const
				"windows" "317"
				"linux" "318"
			}

			"CBaseCombatWeapon::GetWeight"
			{
				// int () const
				"windows" "321"
				"linux" "322"
			}

			"CBaseCombatWeapon::AllowsAutoSwitchTo"
			{
				// bool () const
				"windows" "322"
				"linux" "323"
			}

			"CBaseCombatWeapon::GetShootSound"
			{
				// char * (WeaponSound_t)
				"windows" "330"
				"linux" "331"
			}

			"CBaseCombatWeapon::GetWeaponID"
			{
				// int () const
				"windows" "373"
				"linux" "374"
			}

			"CNMRiH_WeaponBase::GetShoveDamage"
			{
				// int (const CGameTrace &)
				"windows" "397"
				"linux" "398"
			}

			"CNMRiH_MeleeBase::GetThrownDamage"
			{
				// int (CGameTrace  const&)
				"windows" "398"
				"linux" "399"
			}

			"CNMRiH_WeaponBase::TurnOnIronsights"
			{
				// void ()
				"windows" "407"
				"linux" "409"
			}

			"CNMRiH_WeaponBase::TurnOffIronsights"
			{
				// void ()
				"windows" "408"
				"linux" "410"
			}

			"CNMRiH_WeaponBase::ToggleFlashlight"
			{
				// void ()
				"windows" "416"
				"linux" "417"
			}

			"CNMRiH_WeaponBase::IsFlashlightOn"
			{
				// bool ()
				"windows" "417"
				"linux" "418"
			}

			"CNMRiH_WeaponBase::IsFlashlightAllowed"
			{
				// bool ()
				"windows" "418"
				"linux" "419"
			}

			"CNMRiH_WeaponBase::StartShove"
			{
				// void ()
				"windows" "419"
				"linux" "420"
			}

			"CNMRiH_WeaponBase::DoShove"
			{
				// void ()
				"windows" "421"
				"linux" "422"
			}

			"CNMRiH_WeaponBase::CheckAmmo"
			{
				"windows" "422"
				"linux" "423"
			}

			"CNMRiH_WeaponBase::GetExtraShoveDelay"
			{
				// float ()
				"windows" "433"
				"linux" "434"
			}

			"CNMRiH_MeleeBase::QuickAttack"
			{
				// void ()
				"windows" "436"
				"linux" "437"
			}

			"CNMRiH_MeleeBase::DoMeleeSwing"
			{
				// void (int)
				"windows" "437"
				"linux" "438"
			}

			"CNMRiH_MeleeBase::ChargeBash"
			{
				// void ()
				"windows" "438"
				"linux" "439"
			}

			"CNMRiH_MeleeBase::FinishBash"
			{
				// void (bool)
				"windows" "439"
				"linux" "440"
			}

			"CNMRiH_MeleeBase::GetMeleeDamage"
			{
				// int (CBaseEntity *, int)
				"windows" "442"
				"linux" "443"
			}

			"CNMRiH_BaseTool::EndSecondary"
			{
				// void
				"windows" "448"
				"linux" "449"
			}

			"CNMRiH_BaseTool::BeginSecondary"
			{
				// void (CNMRiH_Trigger_ProgressWeapon *)
				"windows" "449"
				"linux" "450"
			}

			// ================================================================
			// Player

			"CNMRiH_Player::Weapon_Drop"
			{
				// void (CBaseCombatWeapon *,Vector  const*,Vector  const*)
				"windows" "271"
				"linux" "272"
			}

			"CNMRiH_Player::BumpWeapon"
			{
				// bool (CBaseCombatWeapon *, bool)
				"windows" "415"
				"linux" "416"
			}

			"CNMRiH_Player::HasFlashlight"
			{
				// bool ()
				"windows" "502"
				"linux" "503"
			}

			// ================================================================
			// GameRules

			"CMultiplayRules::CanHavePlayerItem"
			{
				// bool (CBasePlayer *,CBaseCombatWeapon *)
				"windows" "87"
				"linux" "88"
			}
		}

		"Signatures"
		{
			"CodeCaveForFlareGunRadius"
			{
				// Looks for alignment bytes after a function.
				"library" "server"
				"windows" "\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
			}

			"CNMRiHFlareProjectile::FlyThink" 
			{
				"library" "server"
				"linux" "@_ZN21CNMRiHFlareProjectile8FlyThinkEv"
				"windows" "\x53\x8B\xDC\x83\xEC\x08\x83\xE4\xF0\x83\xC4\x04\x55\x8B\x6B\x04\x89\x6C\x24\x04\x8B\xEC\xA1\x2A\x2A\x2A\x2A\x81\xEC\x68\x03\x00\x00" 
			}

			"CNMRiH_Player::Weapon_PickedUp"
			{
				// void (CBaseCombatWeapon *)
				"library" "server"
				"linux" "@_ZN13CNMRiH_Player15Weapon_PickedUpEP17CBaseCombatWeapon"
				"windows" "\x55\x8B\xEC\x81\xEC\x10\x01\x00\x00\x53\x57"
			}

			"CNMRiH_WeaponBase::AllowsSuicide"
			{
				// bool ()
				"library" "server"
				"linux" "@_ZNK17CNMRiH_WeaponBase13AllowsSuicideEv"
				"windows" "\xE8\x2A\x2A\x2A\x2A\x8A\x80\x50\x0A\x00\x00"
			}

			"CNMRiH_WeaponBase::IsSkillshotModeAvailable"
			{
				// bool ()
				"library" "server"
				"linux" "@_ZN17CNMRiH_WeaponBase24IsSkillshotModeAvailableEv"
				// Ryan: TODO: It's a little more complicated for Windows.

				"windows" "\x56\x57\x8B\xF9\xE8\x2A\x2A\x2A\x2A\x8B\xF0\x85\xF6\x74\x2A\x8B\x16\x8B\xCE\x8B\x92\x4C\x01\x00\x00\xFF\xD2\x84\xC0\x74\x2A\x6A\x00\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x6A\x00\x56\xE8\x2A\x2A\x2A\x2A\x8B\xF0\x83\xC4\x14\x85\xF6\x74\x2A\x8B\x17"
			}

			"CNMRiH_WeaponBase::Unload"
			{
				// void ()
				"library" "server"
				"linux" "@_ZN17CNMRiH_WeaponBase6UnloadEv"
				"windows" "\x55\x8B\xEC\x51\x56\x57\x8B\xF9\xE8\x2A\x2A\x2A\x2A\x8B\xF0\x85\xF6\x0F\x84\x2A\x2A\x2A\x2A\x8B\x16"
			}

			"CNMRiH_MeleeBase::DrainMeleeSwingStamina"
			{
				"library" "server"
				"linux" "@_ZN16CNMRiH_MeleeBase22DrainMeleeSwingStaminaEv"
				"windows" "\x56\x57\x8B\xF1\xE8\x2A\x2A\x2A\x2A\x8B\xF8\x85\xFF\x74\x2A\x8B\xCE"
			}

			"CNMRiH_MeleeBase::ShouldMeleePushback"
			{
				// bool ()
				"library" "server"
				"linux" "@_ZN16CNMRiH_MeleeBase19ShouldMeleePushbackEv"
				"windows" "\x55\x8B\xEC\x51\x56\x8B\xF1\xC7\x45\xFC\x00\x00\x00\x00\xE8\x2A\x2A\x2A\x2A"
			}
		}

		"Functions"
		{
			//
			// Virtual DHooks
			//

			"CNMRiH_BaseMedicalItem::ShouldUseMedicalItem"
			{
				"offset" "CNMRiH_BaseMedicalItem::ShouldUseMedicalItem"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "bool"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseEntity::TraceAttack"
			{
				"offset" "CBaseEntity::TraceAttack"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
					"damageInfo"
					{
						"type" "objectptr" // const CTakeDamageInfo &
						"flags" "byref"
					}
					"direction"
					{
						"type" "objectptr" // const Vector &
						"flags" "byref"
					}
					"trace"
					{
						"type" "objectptr" // trace_t *
					}
					"accumulator"
					{
						"type" "objectptr" // CDmgAccumulator *
					}
				}
			}

			"CBaseCombatWeapon::GetMaxClip1"
			{
				"offset" "CBaseCombatWeapon::GetMaxClip1"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseCombatWeapon::GetWeight"
			{
				"offset" "CBaseCombatWeapon::GetWeight"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::GetShoveDamage"
			{
				"offset" "CNMRiH_WeaponBase::GetShoveDamage"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
					"trace"
					{
						"type" "objectptr"	// CGameTrace  const&
						"flags" "byref"
					}
				}
			}

			"CNMRiH_MeleeBase::GetShoveDamage"
			{
				"offset" "CNMRiH_MeleeBase::GetShoveDamage"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
					"trace"
					{
						"type" "objectptr"	// CGameTrace  const&
						"flags" "byref"
					}
				}
			}

			"CNMRiH_MeleeBase::GetThrownDamage"
			{
				"offset" "CNMRiH_MeleeBase::GetThrownDamage"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
					"trace"
					{
						"type" "objectptr"	// CGameTrace  const&
						"flags" "byref"
					}
				}
			}

			// "CNMRiH_WeaponBase::SetBashActionTime"
			// {
			// 	"offset" "CNMRiH_WeaponBase::SetBashActionTime"
			// 	"callconv" "thiscall"
			// 	"hooktype" "entity"
			// 	"return" "void"
			// 	"this" "entity"
			// 	"arguments"
			// 	{
			// 		"time"
			// 		{
			// 			"type" "float"
			// 		}
			// 		"unknown"
			// 		{
			// 			"type" "bool"
			// 		}
			// 	}
			// }

			"CNMRiH_WeaponBase::DoShove"
			{
				"offset" "CNMRiH_WeaponBase::DoShove"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::CheckAmmo"
			{
				"offset" "CNMRiH_WeaponBase::CheckAmmo"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::QuickAttack"
			{
				"offset" "CNMRiH_MeleeBase::QuickAttack"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::DoMeleeSwing"
			{
				"offset" "CNMRiH_MeleeBase::DoMeleeSwing"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
					"unknown"
					{
						"type" "int"
					}
				}
			}

			"CNMRiH_MeleeBase::ChargeBash"
			{
				"offset" "CNMRiH_MeleeBase::ChargeBash"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::FinishBash"
			{
				"offset" "CNMRiH_MeleeBase::FinishBash"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
					"unknown"
					{
						"type" "bool"
					}
				}
			}

			"CNMRiH_MeleeBase::GetMeleeDamage"
			{
				"offset" "CNMRiH_MeleeBase::GetMeleeDamage"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
					"target"
					{
						"type" "cbaseentity"
					}
					"hitgroup"
					{
						"type" "int"
					}
				}
			}

			"CNMRiH_WeaponBase::StartShove"
			{
				"offset" "CNMRiH_WeaponBase::StartShove"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseCombatWeapon::PrimaryAttack"
			{
				"offset" "CBaseCombatWeapon::PrimaryAttack"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseCombatWeapon::SecondaryAttack"
			{
				"offset" "CBaseCombatWeapon::SecondaryAttack"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseSDKGrenade::EmitGrenade"
			{
				"offset" "CBaseSDKGrenade::EmitGrenade"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
					"source"
					{
						"type" "object" // Vector
						"size" "12"
					}
					"angles"
					{
						"type" "object" // QAngle
						"size" "12"
					}
					"velocity"
					{
						"type" "object" // Vector
						"size" "12"
					}
					"angularImpulse"
					{
						"type" "object" // AngularImpulse
						"size" "12"
					}
					"player"
					{
						"type" "cbaseentity" // CBasePlayer *
					}
					"unknown"
					{
						"type" "cbaseentity" // CWeaponSDKBase *
					}
				}
			}

			"CNMRiH_WeaponBase::TurnOnIronsights"
			{
				"offset" "CNMRiH_WeaponBase::TurnOnIronsights"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::TurnOffIronsights"
			{
				"offset" "CNMRiH_WeaponBase::TurnOffIronsights"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::ToggleFlashlight"
			{
				"offset" "CNMRiH_WeaponBase::ToggleFlashlight"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_BaseMedicalItem::ApplyMedicalItem_Internal"
			{
				"offset" "CNMRiH_BaseMedicalItem::ApplyMedicalItem_Internal"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			//
			// Dynamic detours
			//

			"CNMRiH_WeaponBase::AllowsSuicide"
			{
				"signature" "CNMRiH_WeaponBase::AllowsSuicide"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::IsSkillshotModeAvailable"
			{
				"signature" "CNMRiH_WeaponBase::IsSkillshotModeAvailable"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::Unload"
			{
				"signature" "CNMRiH_WeaponBase::Unload"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::DrainMeleeSwingStamina"
			{
				"signature" "CNMRiH_MeleeBase::DrainMeleeSwingStamina"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::ShouldMeleePushback"
			{
				"signature" "CNMRiH_MeleeBase::ShouldMeleePushback"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"arguments"
				{
				}
			}
		}
	}
}
